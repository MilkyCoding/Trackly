from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import undetected_chromedriver as uc
from selenium.webdriver.chrome.options import Options

from src.bot.database.main import get_db
from src.bot.database.models.track import Track
from src.bot.database.methods.create import create_user, create_track
from src.bot.database.methods.get import get_user, get_user_tracks
from src.bot.database.methods.update import update_track_status, update_track_price
from src.bot.database.methods.delete import delete_track
from src.bot.keyboards.reply import get_main_keyboard, get_marketplace_keyboard
from src.bot.keyboards.inline import get_track_keyboard, get_confirm_keyboard
from src.page_objects.price import OzonPrice, WildberriesPrice

router = Router()

class TrackStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_price = State()
    waiting_for_marketplace = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    db = next(get_db())
    user = get_user(db, message.from_user.id)
    if not user:
        create_user(db, message.from_user.id, message.from_user.username)
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ Ozon –∏ Wildberries.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è–º–∏.",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üìä –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def show_tracks(message: Message):
    db = next(get_db())
    tracks = get_user_tracks(db, message.from_user.id)
    
    if not tracks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    for track in tracks:
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if track.is_active else "‚è∏ –ù–∞ –ø–∞—É–∑–µ"
        await message.answer(
            f"üõç –¢–æ–≤–∞—Ä: {track.product_url}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {track.current_price}‚ÇΩ\n"
            f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {track.target_price}‚ÇΩ\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {track.marketplace}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}",
            reply_markup=get_track_keyboard(track.id, db)
        )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_track_start(message: Message, state: FSMContext):
    await state.set_state(TrackStates.waiting_for_marketplace)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",
        reply_markup=get_marketplace_keyboard()
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state:
        await state.clear()

    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    help_text = (
        "ü§ñ <b>Trackly - –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω</b>\n\n"
        "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ üìä –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ ‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n"
        "üìå <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (Ozon –∏–ª–∏ Wildberries)\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä\n"
        "4. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É\n\n"
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–π —á–∞—Å\n"
        "‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —É–ø–∞–¥–µ—Ç –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ '‚è∏ –ü–∞—É–∑–∞'"
    )

    await message.answer(help_text, reply_markup=get_main_keyboard())

@router.message(TrackStates.waiting_for_marketplace)
async def process_marketplace(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await back_to_main(message, state)
        return
        
    if message.text not in ["Ozon", "Wildberries"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    await state.update_data(marketplace=message.text.lower())
    await state.set_state(TrackStates.waiting_for_url)

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(TrackStates.waiting_for_url)
async def process_url(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(TrackStates.waiting_for_marketplace)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",
            reply_markup=get_marketplace_keyboard()
        )
        return
        
    url = message.text

    if not (url.startswith("https://www.ozon.ru/") or url.startswith("https://www.wildberries.ru/")):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
        return
    
    await state.update_data(product_url=url)
    await state.set_state(TrackStates.waiting_for_price)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=get_main_keyboard()
    )

async def check_price_immediately(url: str, marketplace: str, message: Message) -> tuple[int, str]:
    """Check price immediately after adding a new track."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        status_message = await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Chrome
        options = uc.ChromeOptions()
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏
        await message.answer("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞...")
        driver = uc.Chrome(
            options=options,
            version_main=136  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é Chrome
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ...")
        driver.get(url)
        
        if marketplace == "ozon":
            price_checker = OzonPrice(driver)
        else:
            price_checker = WildberriesPrice(driver)
        
        price = price_checker.get_price()
        driver.quit()
        
        if price == -1:
            return -1, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏."
        
        return price, "‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞"
    except Exception as e:
        logging.error(f"Error checking price: {str(e)}")
        return -1, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã: {str(e)}"

@router.message(TrackStates.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(TrackStates.waiting_for_url)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:",
            reply_markup=ReplyKeyboardRemove()
        )
        return
        
    try:
        price = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    db = next(get_db())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    current_price, status_message = await check_price_immediately(data["product_url"], data["marketplace"], message)
    
    if current_price == -1:
        await message.answer(
            f"{status_message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
    track = create_track(
        db,
        message.from_user.id,
        data["product_url"],
        price,
        data["marketplace"],
        current_price
    )
    
    await state.clear()
    await message.answer(
        f"{status_message}\n"
        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}‚ÇΩ\n"
        f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {price}‚ÇΩ\n\n"
        f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data.startswith("delete_track_"))
async def delete_track_handler(callback: CallbackQuery):
    logging.info(f"Delete track handler called with data: {callback.data}")

    track_id = int(callback.data.split("_")[-1])

    await callback.message.edit_reply_markup(
        reply_markup=get_confirm_keyboard("delete", track_id)
    )

@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_handler(callback: CallbackQuery):
    logging.info(f"Confirm delete handler called with data: {callback.data}")

    try:
        track_id = int(callback.data.split("_")[-1])
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        track = db.query(Track).filter(Track.id == track_id).first()

        if not track:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫
        delete_track(db, track_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
            f"üõç {track.product_url}\n"
            f"üè™ {track.marketplace}"
        )
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logging.error(f"Error deleting track: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

@router.callback_query(F.data.startswith("cancel_delete_"))
async def cancel_delete_handler(callback: CallbackQuery):
    logging.info(f"Cancel delete handler called with data: {callback.data}")

    try:
        track_id = int(callback.data.split("_")[-1])
        db = next(get_db())

        await callback.message.edit_reply_markup(
            reply_markup=get_track_keyboard(track_id, db)
        )

        await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except Exception as e:
        logging.error(f"Error canceling delete: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("pause_track_"))
async def pause_track_handler(callback: CallbackQuery):
    logging.info(f"Pause track handler called with data: {callback.data}")

    track_id = int(callback.data.split("_")[-1])

    await callback.message.edit_reply_markup(
        reply_markup=get_confirm_keyboard("pause", track_id)
    )

@router.callback_query(F.data.startswith("confirm_pause_"))
async def confirm_pause_handler(callback: CallbackQuery):
    logging.info(f"Confirm pause handler called with data: {callback.data}")
    track_id = int(callback.data.split("_")[-1])
    db = next(get_db())
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    update_track_status(db, track_id, False)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    track = db.query(Track).filter(Track.id == track_id).first()

    if track:
        logging.info(f"Track status after update: {track.is_active}")
        status = "‚è∏ –ù–∞ –ø–∞—É–∑–µ" if not track.is_active else "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ"
        await callback.message.edit_text(
            f"üõç –¢–æ–≤–∞—Ä: {track.product_url}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {track.current_price}‚ÇΩ\n"
            f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {track.target_price}‚ÇΩ\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {track.marketplace}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}",
            reply_markup=get_track_keyboard(track_id, db)
        )

@router.callback_query(F.data.startswith("cancel_pause_"))
async def cancel_pause_handler(callback: CallbackQuery):
    logging.info(f"Cancel pause handler called with data: {callback.data}")
    track_id = int(callback.data.split("_")[-1])

    await callback.message.edit_reply_markup(
        reply_markup=get_track_keyboard(track_id)
    )

@router.callback_query(F.data.startswith("resume_track_"))
async def resume_track_handler(callback: CallbackQuery):
    logging.info(f"Resume track handler called with data: {callback.data}")
    track_id = int(callback.data.split("_")[-1])

    await callback.message.edit_reply_markup(
        reply_markup=get_confirm_keyboard("resume", track_id)
    )

@router.callback_query(F.data.startswith("confirm_resume_"))
async def confirm_resume_handler(callback: CallbackQuery):
    logging.info(f"Confirm resume handler called with data: {callback.data}")
    track_id = int(callback.data.split("_")[-1])
    db = next(get_db())
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    update_track_status(db, track_id, True)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    track = db.query(Track).filter(Track.id == track_id).first()

    if track:
        logging.info(f"Track status after update: {track.is_active}")
        status = "‚è∏ –ù–∞ –ø–∞—É–∑–µ" if not track.is_active else "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ"
        await callback.message.edit_text(
            f"üõç –¢–æ–≤–∞—Ä: {track.product_url}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {track.current_price}‚ÇΩ\n"
            f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {track.target_price}‚ÇΩ\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {track.marketplace}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}",
            reply_markup=get_track_keyboard(track_id, db)
        )

@router.callback_query(F.data.startswith("cancel_resume_"))
async def cancel_resume_handler(callback: CallbackQuery):
    logging.info(f"Cancel resume handler called with data: {callback.data}")
    track_id = int(callback.data.split("_")[-1])
    db = next(get_db())
    
    await callback.message.edit_reply_markup(
        reply_markup=get_track_keyboard(track_id, db)
    )

def register_user_handlers(dp: Router):
    dp.register_message_handler(cmd_start, Command("start"))
    dp.register_message_handler(show_tracks, F.text == "üìä –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
    dp.register_message_handler(add_track_start, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    dp.register_message_handler(back_to_main, F.text == "üîô –ù–∞–∑–∞–¥")
    dp.register_message_handler(show_help, F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    
    dp.register_message_handler(process_marketplace, TrackStates.waiting_for_marketplace)
    dp.register_message_handler(process_url, TrackStates.waiting_for_url)
    dp.register_message_handler(process_price, TrackStates.waiting_for_price)
    
    dp.register_callback_query_handler(delete_track_handler, F.data.startswith("delete_track_"))
    dp.register_callback_query_handler(confirm_delete_handler, F.data.startswith("confirm_delete_"))
    dp.register_callback_query_handler(cancel_delete_handler, F.data.startswith("cancel_delete_"))
    dp.register_callback_query_handler(pause_track_handler, F.data.startswith("pause_track_"))
    dp.register_callback_query_handler(confirm_pause_handler, F.data.startswith("confirm_pause_"))
    dp.register_callback_query_handler(cancel_pause_handler, F.data.startswith("cancel_pause_"))
    dp.register_callback_query_handler(resume_track_handler, F.data.startswith("resume_track_"))
    dp.register_callback_query_handler(confirm_resume_handler, F.data.startswith("confirm_resume_"))
    dp.register_callback_query_handler(cancel_resume_handler, F.data.startswith("cancel_resume_"))

