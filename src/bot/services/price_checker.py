import asyncio
import logging
from datetime import datetime
from typing import List

from sqlalchemy.orm import Session
from aiogram import Bot

from src.bot.database.main import get_db
from src.bot.database.models.track import Track
from src.driver.browser import ChromeDriver
from src.page_objects.price import OzonPrice, WildberriesPrice

logger = logging.getLogger(__name__)

class PriceChecker:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.driver = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω"""
        while True:
            try:
                await self.check_prices()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ price checker: {str(e)}")
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

    async def check_prices(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db = next(get_db())
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                tracks = self._get_active_tracks(db)
                
                if not tracks:
                    logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    return
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(tracks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
                self.driver = ChromeDriver.get()
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    for track in tracks:
                        await self._check_track_price(track, db)
                finally:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
                    if self.driver:
                        self.driver.quit()
                        self.driver = None
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db.close()
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {str(e)}")
            if self.driver:
                self.driver.quit()
                self.driver = None

    def _get_active_tracks(self, db: Session) -> List[Track]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π"""
        return db.query(Track).filter(Track.is_active == True).all()

    async def _check_track_price(self, track: Track, db: Session):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {track.id}")
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: {track.product_url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
            self.driver.get(track.product_url)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            if track.marketplace == "ozon":
                price = OzonPrice(self.driver).get_price()
            elif track.marketplace == "wildberries":
                price = WildberriesPrice(self.driver).get_price()
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {track.marketplace}")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            track.current_price = price
            track.last_check = datetime.now()
            
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
            if price <= track.target_price:
                track.is_active = False
                logger.info(f"–¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {track.id}")
                await self.notify_price_drop(track, price)
            
            db.commit()
            logger.info(f"–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {track.id}: {price}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {track.id}: {str(e)}")
            db.rollback()

    async def notify_price_drop(self, track: Track, current_price: float):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        user = track.user
        message = (
            f"üéâ –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä —É–ø–∞–ª–∞!\n\n"
            f"üõç –¢–æ–≤–∞—Ä: {track.product_url}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}‚ÇΩ\n"
            f"üéØ –í–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {track.target_price}‚ÇΩ\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {track.marketplace}\n\n"
            f"‚ÑπÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /add"
        )
        
        await self.bot.send_message(user.user_id, message) 